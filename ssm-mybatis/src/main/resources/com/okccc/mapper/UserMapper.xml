<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 映射文件负责写crud,语句映射是mybatis魅力所在,相比jdbc节省了大量代码 -->
<mapper namespace="com.okccc.mapper.UserMapper">
    <!--
        两个一致
        1.mapper接口的全类名和映射文件的namespace保持一致
        2.mapper接口的方法名和映射文件的sql语句的id保持一致

        标签属性
        id：命名空间中的唯一标识
        resultType：单表查询的结果类型
        resultMap：多表查询的结果映射,处理"对一"或"对多"的映射关系(难点)
        statementType：STATEMENT/PREPARED(默认)对应java.sql包下的Statement/PreparedStatement
        useGeneratedKeys：表示当前添加功能使用自增主键,对用java.sql.Statement的getGeneratedKeys()方法
        keyProperty：自增主键对应的实体类属性名,通常是id

        MyBatis为java常用类型设置了类型别名
        Integer: int、Integer | int: _int、_integer | Map: map | String: string
    -->

    <!-- mybatis自带的二级缓存 -->
    <cache/>
    <!-- mybatis整合ehcache的二级缓存(了解),后面ssm会有专门的缓存框架 -->
<!--    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>-->

    <!-- void insertUser01(User user); -->
    <insert id="insertUser01" useGeneratedKeys="true" keyProperty="id">
        insert into t_user values(#{id},#{username},#{password},#{age},#{gender},#{email})
    </insert>

    <!-- void insertUser02(User02 user); -->
    <insert id="insertUser02">
        <!-- selectKey标签生成非自增列的主键值,BEFORE表示在insert语句之前执行 -->
        <selectKey order="BEFORE" keyProperty="id" resultType="String">
            select replace(uuid(),'-','')
        </selectKey>
        insert into t_user_uuid values(#{id},#{username},#{password},#{age},#{gender},#{email})
    </insert>

    <!-- void deleteUserById(int id); -->
    <delete id="deleteUserById">
        delete from t_user where id = #{id}
    </delete>

    <!-- void deleteUserByIds(String ids); -->
    <delete id="deleteUserByIds">
        <!-- Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Truncated incorrect DOUBLE value: '52, 53' -->
        <!--        delete from t_user where id in (#{ids})-->
        delete from t_user where id in (${ids})
    </delete>

    <!-- void updateUser01(@Param("username") String username, @Param("password")String password); -->
    <update id="updateUser01">
        update t_user set password = #{password} where username = #{username}
    </update>

    <!-- void updateUser02(Map<String, Object> map); -->
    <update id="updateUser02">
        update t_user set password = #{password}, age = #{age} where username = #{username}
    </update>

    <!-- User getUserById(int id); -->
    <select id="getUserById" resultType="com.okccc.pojo.User">
        select * from t_user where id = #{id}
    </select>

    <!-- List<User> getAllUser(); -->
    <select id="getAllUser" resultType="com.okccc.pojo.User">
        select * from t_user
    </select>

    <!-- int getCount(); -->
    <select id="getCount" resultType="java.lang.Integer">
        select count(*) from t_user
    </select>

    <!-- Map<String,Object> getUserByIdToMap(int id); -->
    <select id="getUserByIdToMap" resultType="java.util.Map">
        select * from t_user where id = #{id}
    </select>

    <!-- List<Map<String, Object>> getAllUserToMap01(); -->
    <select id="getAllUserToMap01" resultType="java.util.Map">
        select * from t_user
    </select>

    <!-- Map<String, Object> getAllUserToMap02(); -->
    <select id="getAllUserToMap02" resultType="java.util.Map">
        select * from t_user
    </select>

    <!-- List<User> getUserByLike(String str); -->
    <select id="getUserByLike" resultType="com.okccc.pojo.User">
        <!--        select * from t_user where username like '%${str}%'-->
        select * from t_user where username like "%"#{str}"%"
    </select>

    <!-- List<User> getByTableName(String tableName); -->
    <select id="getByTableName" resultType="com.okccc.pojo.User">
        select * from ${tableName}
    </select>
</mapper>