<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--
        基于注解管理bean(推荐)
        注解：给类、属性、方法、构造器添加标记,@Component普通类、@Controller控制层、@Service业务层、@Repository持久层
        扫描：Spring会扫描包下添加注解的类并将其作为组件进行管理,IOC容器会自动配置该类的bean,id默认是类的小驼峰,也可以自定义但没必要
        由于bean的class只能是类类型,所以是给UserServiceImpl/UserDaoImpl添加注解而不是UserService/UserDao
        UserServiceImpl标记@Service等同于<bean id="userServiceImpl" class="com.okccc.service.impl.UserServiceImpl"/>
        自定义的类可以添加注解,但是第三方jar包提供的类是read-only无法添加注解,仍然需要使用xml,所以后面会继续优化使用配置类代替
        SpringMVC扫描控制层,Spring扫描其它层,所以需要分开防止重复扫描
        context:exclude-filter：排除扫描,搭配use-default-filters="true"(包下所有类都要扫描)
        context:include-filter：包含扫描,搭配use-default-filters="false"(包下所有类都不扫描)

        基于注解的自动装配(推荐)
        问题：随着bean对象的增加,使用<property>和<constructor-arg>进行依赖注入会导致xml越来越大,不好维护
        解决：使用@Autowired标记成员变量(注入对象),比xml自动装配更精简,也可以标记setter方法或有参构造但很少用
        @Autowired原理
        a.默认通过byType方式进行自动装配,根据类型获取bean(常用,一般相同类型的bean只有一个,不会出现下面几种情况)
        b.如果有多个类型匹配的bean,就自动转换成byName方式,根据id和类型获取bean(很少用)
        c.如果有多个类型匹配的bean,且这些bean的id和属性名都不一致,就要给该属性添加@Qualifier注解指定某个bean的id(很少用)
        d.如果没有类型匹配的bean则抛异常NoSuchBeanDefinitionException,因为@Autowired(required=true)要求必须完成自动装配(很少用)
    -->
    <!-- 自定义的类可以使用组件扫描 -->
    <context:component-scan base-package="com.okccc" use-default-filters="true">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
<!--        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
    </context:component-scan>
    <!-- 设置干扰选项验证@Autowired原理 -->
    <bean id="service" class="com.okccc.service.impl.UserServiceImpl"/>
    <bean id="userService" class="com.okccc.service.impl.UserServiceImpl"/>

    <!-- 第三方类依然需要使用bean标签配置,可在配置类使用@Bean代替 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="druidDataSource"/>
    </bean>

    <!--
        OOP(Object Oriented Programming)：面向对象编程,纵向继承机制
        AOP(Aspect Oriented Programming)：面向切面编程,横向抽取机制,是OOP的补充和完善,底层是动态代理,不修改源代码动态增强功能
        应用场景：记录日志、事务处理、异常处理、权限控制、性能监控、缓存控制等非核心业务逻辑的附加功能
        AOP默认使用jdk动态代理实现,可通过proxy-target-class属性切换
        Are class-based (CGLIB) proxies to be created? By default, standard Java interface-based proxies are created.
    -->
    <!-- 开启Aspectj -->
    <aop:aspectj-autoproxy proxy-target-class="false"/>

    <!--
        Connection conn = ...;
        try {
            // 关闭自动提交事务
            conn.setAutoCommit(false);
            // 业务操作
            ...
            // 手动提交事务
            conn.commit();
        } catch (Exception e) {
            // 回滚事务
            conn.rollBack();
        } finally {
            // 释放连接
            conn.close();
        }
        编程式事务：所有操作都是硬编码实现,繁琐且没法复用
        声明式事务：通过xml或注解控制事务的提交和回滚,将业务逻辑和事务控制分离,提高代码可读性和可维护性
    -->
    <!-- 配置事务管理器,相当于切面 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druidDataSource"/>
    </bean>

    <!-- 开启事务管理,相当于通知,在处理业务逻辑的Service层的类或方法上添加@Transaction注解 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>